"""Change role from column to enum

Revision ID: 2c4d524a4b81
Revises: 3e236e8c7a64
Create Date: 2024-07-26 12:02:39.853123

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.engine.reflection import Inspector

from enums import UserRole

# revision identifiers, used by Alembic.
revision: str = '2c4d524a4b81'
down_revision: Union[str, None] = '3e236e8c7a64'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # op.alter_column('users', 'role',
    #                 existing_type=sa.String(),
    #                 type_=sa.Enum(UserRole),
    #                 existing_nullable=True)

    op.create_table(
        'users_new',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('username', sa.String(), nullable=True),
        sa.Column('email', sa.String(), nullable=True),
        sa.Column('password', sa.String(), nullable=True),
        sa.Column('role', sa.Enum(UserRole), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )

    # Copy data from the old table to the new table
    conn = op.get_bind()
    inspector = Inspector.from_engine(conn)
    columns = [column['name'] for column in inspector.get_columns('users') if column['name'] != 'role']
    column_names = ", ".join(columns)

    conn.execute(sa.text(f"""
            INSERT INTO users_new ({column_names}, role)
            SELECT {column_names},
                CASE
                    WHEN role = 'USER' THEN 'USER'
                    WHEN role = 'ADMIN' THEN 'ADMIN'
                    ELSE NULL
                END
            FROM users
        """))

    # Drop the old table
    op.drop_table('users')

    # Rename the new table to the original name
    op.rename_table('users_new', 'users')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # op.alter_column('users', 'role',
    #                 existing_type=sa.Enum(UserRole),
    #                 type_=sa.String(),
    #                 existing_nullable=True)
    op.create_table(
        'users_old',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('username', sa.String(), nullable=True),
        sa.Column('email', sa.String(), nullable=True),
        sa.Column('password', sa.String(), nullable=True),
        sa.Column('role', sa.String(), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )

    # Copy data from the current table to the old schema table
    conn = op.get_bind()
    inspector = Inspector.from_engine(conn)
    columns = [column['name'] for column in inspector.get_columns('users') if column['name'] != 'role']
    column_names = ", ".join(columns)

    conn.execute(sa.text(f"""
            INSERT INTO users_old ({column_names}, role)
            SELECT {column_names}, role
            FROM users
        """))

    # Drop the current table
    op.drop_table('users')

    # Rename the old schema table to the original name
    op.rename_table('users_old', 'users')

    # ### end Alembic commands ###
